{
  "paragraphs": [
    {
      "text": "%md\n# RDD",
      "user": "anonymous",
      "dateUpdated": "2024-02-18T19:37:55+0300",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h1>RDD</h1>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1708274275738_223804272",
      "id": "paragraph_1707745349008_674446587",
      "dateCreated": "2024-02-18T19:37:55+0300",
      "status": "READY",
      "focus": true,
      "$$hashKey": "object:25471"
    },
    {
      "title": "(1) Сгруппировать по ключу, просуммировать значения, вывести результат",
      "text": "%pyspark\n\nrdd = sc.parallelize([(1,2), (3,4), (3,6), (4,5), (3, 4), (1, 5), (4, 1)])\n\nresult_rdd = rdd \\\n    .reduceByKey(lambda x, y: (x + y))\n\nresult_rdd.take(10)",
      "user": "anonymous",
      "dateUpdated": "2024-02-18T19:37:55+0300",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "[(4, 6), (1, 7), (3, 14)]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1708274275739_665453735",
      "id": "20211118-215516_1413610769",
      "dateCreated": "2024-02-18T19:37:55+0300",
      "status": "READY",
      "$$hashKey": "object:25472"
    },
    {
      "title": "(1) Посчитать частоту встречаемости слов",
      "text": "%pyspark\n\nlines = sc.parallelize([\n    \"a ab abc\",\n    \"a ac abc\",\n    \"b b ab abc\"\n    ])\n\ncounts = lines.flatMap(lambda x: x.split(' ')) \\\n    .map(lambda x: (x, 1)) \\\n    .reduceByKey(lambda x, y: (x + y))\n   \n# дополнить код, чтобы получился rdd из пар (слово, частота)\n\noutput = counts.collect()\n\nfor (word, count) in output:\n    print(\"%s: %i\" % (word, count))",
      "user": "anonymous",
      "dateUpdated": "2024-02-18T19:37:55+0300",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "ab: 2\nabc: 3\nb: 2\na: 2\nac: 1\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1708274275739_2044116917",
      "id": "paragraph_1707745334164_10061305",
      "dateCreated": "2024-02-18T19:37:55+0300",
      "status": "READY",
      "$$hashKey": "object:25473"
    },
    {
      "text": "%md\n# market.events",
      "user": "anonymous",
      "dateUpdated": "2024-02-18T19:37:55+0300",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h1>market.events</h1>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1708274275739_321500270",
      "id": "paragraph_1707745368585_1707406419",
      "dateCreated": "2024-02-18T19:37:55+0300",
      "status": "READY",
      "$$hashKey": "object:25474"
    },
    {
      "title": "(1) Добавить колонки category_1, category_2, category_3 с категориями различного уровня",
      "text": "%pyspark\n\nfrom pyspark.sql.functions import regexp_extract\n\nevents_df = spark.table(\"market.events\")\n\nevents_cat_df = events_df \\\n    .withColumn(\"cat_1\", regexp_extract(\"category_code\", \"([a-z_]*)?.?([a-z_]*)?.?([a-z_]*)?\", 1) ) \\\n    .withColumn(\"cat_2\", regexp_extract(\"category_code\", \"([a-z_]*)?.?([a-z_]*)?.?([a-z_]*)?\", 2) ) \\\n    .withColumn(\"cat_3\", regexp_extract(\"category_code\", \"([a-z_]*)?.?([a-z_]*)?.?([a-z_]*)?\", 3) ) \\\n\nevents_cat_df.show()",
      "user": "anonymous",
      "dateUpdated": "2024-02-18T19:37:55+0300",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "category_code": "string",
                      "cat_1": "string",
                      "cat_2": "string",
                      "cat_3": "string",
                      "brand": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          },
          "1": {
            "graph": {
              "mode": "table",
              "height": 300,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "event_time": "string",
                      "event_type": "string",
                      "product_id": "string",
                      "category_id": "string",
                      "category_code": "string",
                      "brand": "string",
                      "price": "string",
                      "user_id": "string",
                      "user_session": "string",
                      "event_date": "string",
                      "cat_1": "string",
                      "cat_2": "string",
                      "cat_3": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------------------+----------+----------+-------------------+--------------------+--------+------+---------+--------------------+----------+-----------+-----------+------------+\n|         event_time|event_type|product_id|        category_id|       category_code|   brand| price|  user_id|        user_session|event_date|      cat_1|      cat_2|       cat_3|\n+-------------------+----------+----------+-------------------+--------------------+--------+------+---------+--------------------+----------+-----------+-----------+------------+\n|2019-10-13 15:02:18|      view|  22700805|2053013556168753601|                null|    null|177.61|547126800|c22588ea-947d-4a5...|2019-10-13|       null|       null|        null|\n|2019-10-13 13:22:27|      view|   9700225|2053013554096767303|computers.compone...|aerocool| 25.15|520103192|3a269ad8-a31a-40e...|2019-10-13|  computers| components|power_supply|\n|2019-10-13 08:12:41|      view|  14700204|2053013557133443581|furniture.living_...|    null|282.89|529652972|a4f32325-6dee-4bb...|2019-10-13|  furniture|living_room|     cabinet|\n|2019-10-13 18:42:41|      view|  15100008|2053013557024391671|                null|     bts|488.79|523075128|c0b91c1a-4446-4fa...|2019-10-13|       null|       null|        null|\n|2019-10-13 13:16:23|      view|  16700605|2053013559901684381|furniture.kitchen...|    zeta| 16.19|544040557|7f5328a3-9247-49f...|2019-10-13|  furniture|    kitchen|       chair|\n|2019-10-13 12:23:59|      view|   3200324|2053013555321504139|appliances.kitche...|   bosch|185.31|516203022|bb357ba3-f662-4d5...|2019-10-13| appliances|    kitchen|meat_grinder|\n|2019-10-13 10:13:57|      view|   4600386|2053013563944993659|appliances.kitche...|   bosch|431.35|535101551|7fd386c7-d804-458...|2019-10-13| appliances|    kitchen|  dishwasher|\n|2019-10-13 04:29:15|      view|  12201806|2116907525176557699|       sport.bicycle|   stels|181.47|551766106|212d21ff-84dd-4db...|2019-10-13|      sport|    bicycle|            |\n|2019-10-13 05:07:09|      view|   8800773|2053013555573162395|electronics.telep...|   nokia| 73.41|513397021|1af08f7a-b341-4bb...|2019-10-13|electronics|  telephone|            |\n|2019-10-13 18:38:01|      view|   4804056|2053013554658804075|electronics.audio...|   apple|161.87|536369209|384256d4-fe93-45a...|2019-10-13|electronics|      audio|   headphone|\n|2019-10-13 07:05:55|      view|  22700068|2053013556168753601|                null|   force| 86.99|543933598|5b62f685-43cc-43e...|2019-10-13|       null|       null|        null|\n|2019-10-13 11:28:13|      view|   3601343|2053013563810775923|appliances.kitche...| samsung|437.57|555764348|96bc4b7b-9093-47d...|2019-10-13| appliances|    kitchen|      washer|\n|2019-10-13 21:55:04|      view|  27400004|2053013563391345499|                null| philips| 43.73|547583517|fdfb60eb-90a3-4d7...|2019-10-13|       null|       null|        null|\n|2019-10-13 10:41:16|      view|  26402783|2053013563651392361|                null|    null| 55.86|529438302|024f9dc8-666c-4cd...|2019-10-13|       null|       null|        null|\n|2019-10-13 14:07:57|      view|  12703179|2053013553559896355|                null|  nokian|134.37|557995744|2e1bc2ab-9f8a-4ce...|2019-10-13|       null|       null|        null|\n|2019-10-13 04:53:04|      view|   8700414|2053013563097744201|appliances.person...|babyliss| 55.67|559345477|683abdfc-e435-477...|2019-10-13| appliances|   personal| hair_cutter|\n|2019-10-13 13:53:35|      view|  12200523|2116907525176557699|       sport.bicycle| phoenix|128.42|536323581|aebb422e-af40-45d...|2019-10-13|      sport|    bicycle|            |\n|2019-10-13 08:38:39|      view|   3800985|2053013566176363511|     appliances.iron|   tefal| 28.29|525046668|7f099072-a6a4-4cf...|2019-10-13| appliances|       iron|            |\n|2019-10-13 03:19:20|  purchase|   1002540|2053013555631882655|electronics.smart...|   apple|473.37|515528933|5c2394be-1a00-46a...|2019-10-13|electronics| smartphone|            |\n|2019-10-13 13:08:08|      view|   1004523|2053013555631882655|electronics.smart...|   nokia|221.15|512728048|2d8e5d8b-5037-496...|2019-10-13|electronics| smartphone|            |\n+-------------------+----------+----------+-------------------+--------------------+--------+------+---------+--------------------+----------+-----------+-----------+------------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1708274275739_1686849407",
      "id": "20211118-220108_317477146",
      "dateCreated": "2024-02-18T19:37:55+0300",
      "status": "READY",
      "$$hashKey": "object:25475"
    },
    {
      "text": "%pyspark\n",
      "user": "fraktalius",
      "dateUpdated": "2024-02-22T03:42:12+0300",
      "progress": 0,
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1708562532644_1852570655",
      "id": "paragraph_1708562532644_1852570655",
      "dateCreated": "2024-02-22T03:42:12+0300",
      "status": "READY",
      "$$hashKey": "object:25476"
    },
    {
      "title": "(1) Вывести топ-3 брендов по количеству просмотров для каждой категории 2-го уровня",
      "text": "%pyspark\n\nfrom pyspark.sql.functions import col, count, row_number\nfrom pyspark.sql.window import Window\n\nwindowSpec = Window.partitionBy(\"cat_2\").orderBy(col(\"views\").desc())\n\nevents_rank_df = events_cat_df \\\n    .where(col(\"brand\") != 'null') \\\n    .groupBy(\"cat_1\", \"cat_2\", \"brand\").agg(count(\"*\").alias(\"views\")) \\\n    .withColumn(\"rank\", row_number().over(windowSpec)) \\\n    .where(col(\"rank\") <= 3) \\\n    .orderBy(\"cat_2\", col(\"views\").desc())\n    \nevents_rank_df.show()    \n",
      "user": "anonymous",
      "dateUpdated": "2024-02-18T19:37:55+0300",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "editorHide": false,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-----------+-----------+--------+------+----+\n|      cat_1|      cat_2|   brand| views|rank|\n+-----------+-----------+--------+------+----+\n|       null|       null| lucente|655818|   1|\n|       null|       null|  xiaomi|385542|   2|\n|       null|       null|cordiant|368045|   3|\n|       auto|accessories| pioneer|137956|   1|\n|       auto|accessories|starline|129598|   2|\n|       auto|accessories| neoline| 51205|   3|\n|electronics|      audio|   apple|396747|   1|\n|electronics|      audio|  xiaomi|213958|   2|\n|electronics|      audio|     jbl|102152|   3|\n|accessories|        bag|   karya| 25390|   1|\n|accessories|        bag|  ritmix| 15615|   2|\n|accessories|        bag| stanley| 12046|   3|\n|  furniture|   bathroom|  triton|  4564|   1|\n|  furniture|   bathroom|cersanit|  4132|   2|\n|  furniture|   bathroom| santeri|  3935|   3|\n|  furniture|    bedroom|      sv| 52614|   1|\n|  furniture|    bedroom|     brw| 43079|   2|\n|  furniture|    bedroom| incanto| 24221|   3|\n|    apparel|       belt|   petek|   185|   1|\n|    apparel|       belt| carpisa|   100|   2|\n+-----------+-----------+--------+------+----+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1708274275739_1303037444",
      "id": "20211118-220232_1309126510",
      "dateCreated": "2024-02-18T19:37:55+0300",
      "status": "READY",
      "$$hashKey": "object:25477"
    },
    {
      "text": "%md\n# Датасет с треками\n### !!! Внесены небольшие изменения, в частности, сохранена промежуточная таблица (без explode)",
      "user": "anonymous",
      "dateUpdated": "2024-02-18T19:37:55+0300",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h1>Датасет с треками</h1>\n<h3>!!! Внесены небольшие изменения, в частности, сохранена промежуточная таблица (без explode)</h3>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1708274275739_1115047727",
      "id": "paragraph_1707745443075_1856928477",
      "dateCreated": "2024-02-18T19:37:55+0300",
      "status": "READY",
      "$$hashKey": "object:25478"
    },
    {
      "title": "создание hw_3.tracks для запуска локально (на кластере уже готова)",
      "text": "%pyspark\n\nimport pyspark.sql.functions as f\nfrom pyspark.sql.types import *\n\nsch=ArrayType(StringType());\n\n# важно что разделитель ', ' с пробелом, иначе пробелы добавятся в значения\ntracks = spark.read.option(\"header\", \"true\") \\\n        .option(\"escape\", '\"') \\\n        .option(\"InferSchema\", \"true\") \\\n        .csv(\"/datasets/tracks.csv\") \\\n        .withColumn(\"release_year\", f.substring(\"release_date\", 1, 4).cast(IntegerType())) \\\n        .withColumn(\"array_artist\", f.split(f.regexp_replace(f.col(\"artists\"), \"[\\]\\[\\']\", \"\"),\", \")) \\\n        .cache() #выделяем год в отдельную колонку и преобразуем колонку с артистами в массив\n\ntracks.write.mode(\"overwrite\").saveAsTable(\"user_id.tracks\")\n\ntracks_exp = tracks.select(  \n                            \"name\", \n                            \"popularity\",\n                            \"danceability\",\n                            \"energy\",\n                            \"speechiness\",\n                            \"acousticness\",\n                            \"liveness\",\n                            \"valence\",\n                            \"release_year\",\n                            \"artists\",\n                            f.explode(f.col(\"array_artist\") ).alias(\"name_artist\")\n                        ) #создаем отдельную таблицу с развернутым массивом артистов\n                        \ntracks_exp.printSchema()\n\ntracks_exp.write.mode(\"overwrite\").saveAsTable(\"user_id.tracks_exp\")",
      "user": "anonymous",
      "dateUpdated": "2024-02-18T19:37:55+0300",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "editorHide": false,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- name: string (nullable = true)\n |-- popularity: integer (nullable = true)\n |-- danceability: double (nullable = true)\n |-- energy: double (nullable = true)\n |-- speechiness: double (nullable = true)\n |-- acousticness: double (nullable = true)\n |-- liveness: double (nullable = true)\n |-- valence: double (nullable = true)\n |-- release_year: integer (nullable = true)\n |-- artists: string (nullable = true)\n |-- name_artist: string (nullable = true)\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1708274275739_555731590",
      "id": "20211122-175857_277595720",
      "dateCreated": "2024-02-18T19:37:55+0300",
      "status": "READY",
      "$$hashKey": "object:25479"
    },
    {
      "text": "%pyspark\n\ntracks = spark.table(\"hw_3.tracks\")\nz.show(tracks)\n",
      "user": "anonymous",
      "dateUpdated": "2024-02-18T19:37:55+0300",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "name": "string",
                      "popularity": "string",
                      "danceability": "string",
                      "energy": "string",
                      "speechiness": "string",
                      "acousticness": "string",
                      "liveness": "string",
                      "valence": "string",
                      "release_year": "string",
                      "artists": "string",
                      "name_artist": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1708274275739_1865861078",
      "id": "paragraph_1707810972753_1609905340",
      "dateCreated": "2024-02-18T19:37:55+0300",
      "status": "READY",
      "$$hashKey": "object:25480"
    },
    {
      "text": "%pyspark\n\n\nwindow = Window.orderBy(F.col('popularity').desc()).partitionBy('release_year')\n\ntop_100 = (tracks\n        .where(F.col('popularity') > 0)\n        .withColumn('rank', F.rank().over(window))\n        .where(F.col('rank') < 101)\n        )\n\ntracks_agg = (top_100\n            .groupBy('name_artist')\n            .agg(F.count('*').alias('count'))\n            .orderBy(F.col('count').desc())\n    )\n\ntracks_agg.show()\n\n",
      "user": "anonymous",
      "dateUpdated": "2024-02-18T21:05:08+0300",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1708279492996_831189489",
      "id": "paragraph_1708279492996_831189489",
      "dateCreated": "2024-02-18T21:04:52+0300",
      "status": "READY",
      "$$hashKey": "object:25481"
    },
    {
      "title": "!!! Посчитаем топ-100 и сохраним в кэш, т.к. используется в нескольких задачах",
      "text": "%pyspark\n\nfrom pyspark.sql.functions import col, row_number, explode\nfrom pyspark.sql.window import Window\n\nwindowSpec = Window.partitionBy(\"release_year\").orderBy(col(\"popularity\").desc(), \"name\")\n\ntracks = spark.table(\"user_id.tracks\")\n\n#.select(\"name\", \"popularity\", \"release_year\", \"array_artist\") \\\ntop_100_tracks = tracks \\\n    .dropDuplicates() \\\n    .withColumn(\"rn\", row_number().over(windowSpec)) \\\n    .where(col(\"rn\") <= 100) \\\n    .orderBy(\"release_year\", \"rn\") \n    \ntop_100_tracks_exp = top_100_tracks \\\n    .select(\"release_year\", \"array_artist\", explode(col(\"array_artist\")).alias(\"name_artist\")) \\\n    .cache()\n    \ntop_100_tracks_exp.count()",
      "user": "anonymous",
      "dateUpdated": "2024-02-18T19:43:27+0300",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "12738\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1708274275739_276532366",
      "id": "paragraph_1708176899285_2023965708",
      "dateCreated": "2024-02-18T19:37:55+0300",
      "status": "READY",
      "$$hashKey": "object:25482"
    },
    {
      "title": "(1) Какие артисты выпустили наибольшее число песен из годового топ-100 (по популярности)?",
      "text": "%pyspark\n\nfrom pyspark.sql.functions import col\n\ntop_100_tracks_by_artists_by_countity = top_100_tracks_exp \\\n    .groupBy(\"name_artist\").count() \\\n    .orderBy(col(\"count\").desc())\n    \ntop_100_tracks_by_artists_by_countity.show() \n",
      "user": "anonymous",
      "dateUpdated": "2024-02-18T19:37:55+0300",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+--------------------+-----+\n|         name_artist|count|\n+--------------------+-----+\n|      Billie Holiday|  183|\n|         The Beatles|  118|\n|       Frank Sinatra|  117|\n|          Till Hagen|  100|\n|     Stefan Kaminski|  100|\n|       Dale Carnegie|  100|\n|     Louis Armstrong|   91|\n|           Doris Day|   90|\n|       Benny Goodman|   77|\n|         Fats Waller|   75|\n|     Frédéric Chopin|   75|\n|Louis Armstrong &...|   71|\n|        Teddy Wilson|   71|\n|     Bix Beiderbecke|   64|\n|    Django Reinhardt|   55|\n|         Bing Crosby|   54|\n|MGM Studio Orchestra|   52|\n|   Vladimir Horowitz|   50|\n|     Fernando Pessoa|   50|\n|   Arthur Rubinstein|   50|\n|        Judy Garland|   49|\n|       Elvis Presley|   48|\n|           Peggy Lee|   48|\n|        Bessie Smith|   45|\n|     Ella Fitzgerald|   44|\n|      Duke Ellington|   43|\n|         Dean Martin|   42|\n|        Fred Astaire|   39|\n|     Christoph Waltz|   38|\n|   Ernst H. Gombrich|   38|\n|         Franz Liszt|   36|\n|               Drake|   36|\n|          Pink Floyd|   35|\n|      Robert Johnson|   35|\n|              Eminem|   34|\n|       Justin Bieber|   34|\n|     Thelonious Monk|   33|\n|               Queen|   31|\n|        Tommy Dorsey|   31|\n|  The Rolling Stones|   31|\n|             Rihanna|   31|\n|  Stéphane Grappelli|   30|\n|Quintette du Hot ...|   30|\n|          Kanye West|   30|\n|       Fleetwood Mac|   29|\n|          Bruno Mars|   29|\n|       Nat King Cole|   29|\n|     Michael Jackson|   28|\n|       John Coltrane|   28|\n| La Sonora Santanera|   28|\n|          Erik Satie|   27|\n|         Los Panchos|   27|\n|     Dizzy Gillespie|   27|\n|        Led Zeppelin|   27|\n|     The Pied Pipers|   26|\n|Louis Armstrong &...|   26|\n|       Sarah Vaughan|   25|\n|         Umm Kulthum|   25|\n|         Miles Davis|   25|\n|      Charlie Parker|   24|\n|           Bob Dylan|   24|\n|         David Bowie|   24|\n|         Johnny Cash|   24|\n|               AC/DC|   24|\n|          Lead Belly|   23|\n|          Gene Autry|   23|\n|Paul Whiteman & H...|   23|\n|      Jimmie Rodgers|   23|\n|           Sam Cooke|   23|\n|        Javier Solís|   22|\n|       Stevie Wonder|   22|\n|         Linkin Park|   22|\n|     Francis Poulenc|   22|\n|         Max Steiner|   22|\n|          Elton John|   22|\n|                ABBA|   22|\n|    Georges Brassens|   21|\n|Bob Marley & The ...|   21|\n|Creedence Clearwa...|   21|\n|        Glenn Miller|   21|\n|    Francisco Canaro|   20|\n|         Luis Miguel|   20|\n|     James Piano Bar|   20|\n|       One Direction|   20|\n|          Bill Evans|   20|\n|     Ignacio Corsini|   19|\n|                2Pac|   19|\n|    Rosemary Clooney|   19|\n|The BBC Dance Orc...|   19|\n|       Carlos Gardel|   19|\n|   The Carter Family|   19|\n|          Henry Hall|   19|\n|        \"Anita ODay\"|   19|\n|          Chet Baker|   18|\n|          The Weeknd|   18|\n|       Alfred Cortot|   18|\n|           The Doors|   18|\n|       Ariana Grande|   18|\n|      Memphis Minnie|   18|\n|          Billy Joel|   18|\n|          Skip James|   18|\n|           Stan Getz|   18|\n|             Nirvana|   18|\n|            Coldplay|   17|\n|   MGM Studio Chorus|   17|\n|          Ed Sheeran|   17|\n|        Taylor Swift|   17|\n|       Raymond Scott|   17|\n|José Alfredo Jimenez|   17|\n|   Simon & Garfunkel|   17|\n|      \"Guns N Roses\"|   17|\n|      The Beach Boys|   17|\n|         Nina Simone|   17|\n|            Bee Gees|   17|\n|        Julie London|   17|\n|            Maroon 5|   17|\n|             Beyoncé|   16|\n|             50 Cent|   16|\n|Blind Willie Johnson|   16|\n|Red Hot Chili Pep...|   16|\n|              Eagles|   16|\n|Louis Armstrong O...|   16|\n|Paul Weston And H...|   16|\n|      Jascha Heifetz|   16|\n|        Willie Dixon|   16|\n|Percy Faith & His...|   16|\n|         Chris Brown|   15|\n|     Charlie Chaplin|   15|\n|             Shakira|   15|\n|           Lady Gaga|   15|\n|          Snoop Dogg|   15|\n|         Ahmad Jamal|   15|\n|      Clifford Brown|   15|\n|       The Ink Spots|   15|\n|       Marty Robbins|   15|\n| Cannonball Adderley|   15|\n|Warner Bros Studi...|   15|\n|             Dr. Dre|   15|\n|       Calvin Harris|   15|\n|          Katy Perry|   15|\n|        Johnny Green|   14|\n|      Jack Teagarden|   14|\n|           Aerosmith|   14|\n|          Gene Kelly|   14|\n|        Daddy Yankee|   14|\n|Benny Goodman Sextet|   14|\n|  Philippe Entremont|   14|\n|          Lena Horne|   14|\n|      Britney Spears|   14|\n|           Art Tatum|   14|\n|                Nomy|   14|\n|               Adele|   14|\n|The Notorious B.I.G.|   13|\n|         Sonia Lopez|   13|\n|         Post Malone|   13|\n|               JAY-Z|   13|\n|           Daft Punk|   13|\n|          Juice WRLD|   13|\n|         Tito Schipa|   13|\n|Agrupación Musica...|   13|\n|      Arctic Monkeys|   13|\n|           Metallica|   13|\n|            Les Paul|   13|\n|                  U2|   13|\n|          Jack Payne|   12|\n|        Travis Scott|   12|\n|   Justin Timberlake|   12|\n|        Dire Straits|   12|\n|   Bruce Springsteen|   12|\n|         Marvin Gaye|   12|\n|      Kendrick Lamar|   12|\n|   Charlie Christian|   12|\n|            Dua Lipa|   12|\n|   TIN TAN Y MARCELO|   12|\n|        Phil Collins|   12|\n|           Green Day|   12|\n|            Bon Jovi|   12|\n|           Bad Bunny|   12|\n|        Mariah Carey|   12|\n| The Boswell Sisters|   12|\n|          Les Baxter|   12|\n|     Lata Mangeshkar|   12|\n|        Merle Travis|   12|\n|        Van Morrison|   12|\n|           Lil Wayne|   12|\n|His BBC Dance Orc...|   11|\n|The Velvet Underg...|   11|\n|       Willie Nelson|   11|\n|      Lynyrd Skynyrd|   11|\n|Jean Goldkette an...|   11|\n| The Everly Brothers|   11|\n|              Mukesh|   11|\n|         Roy Orbison|   11|\n|         Mötley Crüe|   11|\n|     Imagine Dragons|   11|\n|     Giacomo Puccini|   11|\n|         Pérez Prado|   11|\n|Antônio Carlos Jobim|   11|\n|             Madonna|   11|\n|        XXXTENTACION|   11|\n+--------------------+-----+\nonly showing top 200 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1708274275739_1801333650",
      "id": "20211122-183357_1504397782",
      "dateCreated": "2024-02-18T19:37:55+0300",
      "status": "READY",
      "$$hashKey": "object:25483"
    },
    {
      "title": "(1) Вывести топ артистов, которые чаще других попадали в годовой топ-100 песен по популярности?",
      "text": "%pyspark\n   \nfrom pyspark.sql.functions import col \n\ntop_100_tracks_by_artists_by_rate = top_100_tracks_exp \\\n    .select(\"name_artist\", \"release_year\").distinct() \\\n    .groupBy(\"name_artist\").count() \\\n    .orderBy(col(\"count\").desc())    \n    \ntop_100_tracks_by_artists_by_rate.show()      \n",
      "user": "anonymous",
      "dateUpdated": "2024-02-18T19:37:55+0300",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+------------------+-----+\n|       name_artist|count|\n+------------------+-----+\n|     Frank Sinatra|   23|\n|       Johnny Cash|   18|\n|   Ella Fitzgerald|   16|\n|   Louis Armstrong|   15|\n|        Elton John|   13|\n|         Peggy Lee|   13|\n|   James Piano Bar|   13|\n|       David Bowie|   13|\n|     Elvis Presley|   13|\n|    Billie Holiday|   13|\n|     Stevie Wonder|   12|\n|             Drake|   12|\n|            Eminem|   12|\n|The Rolling Stones|   11|\n|         Bob Dylan|   11|\n|        Snoop Dogg|   11|\n|              KISS|   11|\n|       Dean Martin|   11|\n|             Queen|   11|\n|        Kanye West|   11|\n+------------------+-----+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1708274275739_1974961120",
      "id": "20211122-175857_1498457746",
      "dateCreated": "2024-02-18T19:37:55+0300",
      "status": "READY",
      "$$hashKey": "object:25484"
    },
    {
      "title": " (1) Какие артисты дольше других несколько лет подряд держались в ежегодном топ-100 песен по популярности?",
      "text": "%pyspark\n\n# учтем тот факт, что если пронумеровать отсортированные года, которые сгруппированны по исполнителю, \n# а затем от года отнять соответствующий номер, то разница между ними, для подряд идущих годов, даст ровно одну группу\n\nfrom pyspark.sql.functions import col, row_number, count, max\nfrom pyspark.sql.window import Window\n\nwindowRn = Window.partitionBy(\"name_artist\").orderBy(\"release_year\")  \n    \ntop_100_tracks_by_artists_by_year_1 = top_100_tracks_exp \\\n    .select(\"name_artist\", \"release_year\").distinct() \\\n    .withColumn(\"rn\", row_number().over(windowRn)) \\\n    .withColumn(\"dif\", col(\"release_year\") - col(\"rn\")) \\\n    .groupBy(\"name_artist\", \"dif\").agg(count(\"*\").alias(\"cnt\")) \\\n    .groupBy(\"name_artist\").agg(max(\"cnt\").alias(\"mx\")) \\\n    .orderBy(col(\"mx\").desc()) \n\ntop_100_tracks_by_artists_by_year_1.show()",
      "user": "anonymous",
      "dateUpdated": "2024-02-18T19:43:57+0300",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "name_artist": "string",
                      "max_period": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          },
          "1": {
            "graph": {
              "mode": "table",
              "height": 300,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "name_artist": "string",
                      "mx": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+--------------+---+\n|   name_artist| mx|\n+--------------+---+\n| Frank Sinatra| 14|\n|   David Bowie|  9|\n|         Drake|  9|\n| Elvis Presley|  8|\n|   The Beatles|  8|\n|    Kanye West|  7|\n|    Elton John|  7|\n|The Beach Boys|  6|\n|          KISS|  6|\n|       Rihanna|  6|\n|  Teddy Wilson|  6|\n|     Bob Dylan|  6|\n|Billie Holiday|  6|\n|      Dua Lipa|  5|\n| John Coltrane|  5|\n|     Sam Cooke|  5|\n|         Queen|  5|\n|     José José|  5|\n| Benny Goodman|  5|\n|   Miles Davis|  5|\n+--------------+---+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1708274275739_2078660212",
      "id": "20211122-181159_2142949500",
      "dateCreated": "2024-02-18T19:37:55+0300",
      "status": "READY",
      "$$hashKey": "object:25485"
    },
    {
      "title": "(1) Решение с udf",
      "text": "%pyspark\n\n# суть решения в том, чтобы передать года выпуска треков по одному артисту в виде списка\n# далее отсортировать список, пройтисть по каждому элементу, и если он отличася от предудущего более чем на 1, добавить разделитель\n# затем разбить список на несколько по разделителю и определить, какой их новых списков максимального размера\n\nfrom pyspark.sql.functions import  col, collect_list, udf\nfrom pyspark.sql.types import IntegerType\n\ndef getChainLen(years):\n\n    years.sort()\n    sep_years = []\n    \n    for x in years:\n        if len(sep_years) != 0 and (int(sep_years[-1]) + 1) != x:\n            sep_years.append(str('s'))\n            sep_years.append(str(x))\n        else:\n            sep_years.append(str(x))\n\n    sep_years = \" \".join(sep_years).split('s') \n\n    y = 0\n    for x in sep_years:\n        x = x.strip().split()\n        y = len(x) if len(x) > y else y\n    \n    return y\n    \ngetChainLenUDF = udf(lambda z:getChainLen(z), IntegerType())    \n    \ntop_100_tracks_by_artists_by_year_2 = top_100_tracks_exp \\\n    .select(\"name_artist\", \"release_year\").distinct() \\\n    .groupBy(\"name_artist\").agg(collect_list(\"release_year\").alias(\"years\")) \\\n    .withColumn(\"cnt\", getChainLenUDF(col(\"years\"))) \\\n    .select(\"name_artist\", \"cnt\") \\\n    .orderBy(col(\"cnt\").desc(), \"name_artist\")\n    \ntop_100_tracks_by_artists_by_year_2.show()    \n",
      "user": "anonymous",
      "dateUpdated": "2024-02-18T19:45:14+0300",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+---------------+---+\n|    name_artist|cnt|\n+---------------+---+\n|  Frank Sinatra| 14|\n|    David Bowie|  9|\n|          Drake|  9|\n|  Elvis Presley|  8|\n|    The Beatles|  8|\n|     Elton John|  7|\n|     Kanye West|  7|\n| Billie Holiday|  6|\n|      Bob Dylan|  6|\n|           KISS|  6|\n|        Rihanna|  6|\n|   Teddy Wilson|  6|\n| The Beach Boys|  6|\n|  Benny Goodman|  5|\n|  Billie Eilish|  5|\n|  Calvin Harris|  5|\n|    Dean Martin|  5|\n|       Dua Lipa|  5|\n|         Eagles|  5|\n|Ella Fitzgerald|  5|\n+---------------+---+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1708274275739_83781744",
      "id": "20211122-184014_1711960007",
      "dateCreated": "2024-02-18T19:37:55+0300",
      "status": "READY",
      "$$hashKey": "object:25486"
    },
    {
      "title": "(1) Через lag",
      "text": "%pyspark\n# https://stackoverflow.com/questions/56384625/pyspark-cumulative-sum-with-reset-condition\n\nfrom pyspark.sql.functions import col, lag, lit, sum, max, when\nfrom pyspark.sql.window import Window\n\nwindowLag = Window.partitionBy(\"name_artist\").orderBy(col(\"release_year\"))\nwindowGrp = Window.orderBy(\"name_artist\", \"release_year\")\n\ntop_100_tracks_by_artists_by_year_3 = top_100_tracks_exp \\\n    .select(\"name_artist\", \"release_year\").distinct() \\\n    .withColumn(\"lag\", lag(\"release_year\").over(windowLag)) \\\n    .withColumn(\"dif\", col(\"release_year\") - col(\"lag\")) \\\n    .withColumn(\"tag\", when(col(\"dif\") != 1, lit(None)).otherwise(col(\"dif\"))) \\\n    .withColumn(\"grp\", sum((col(\"tag\").isNull()).cast(\"int\")).over(windowGrp)) \\\n    .groupBy(\"name_artist\", \"grp\").count() \\\n    .groupBy(\"name_artist\").agg(max(col(\"count\")).alias(\"cnt\")) \\\n    .orderBy(col(\"cnt\").desc(), \"name_artist\")\n\ntop_100_tracks_by_artists_by_year_3.show()\n",
      "user": "anonymous",
      "dateUpdated": "2024-02-18T19:37:55+0300",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+---------------+---+\n|    name_artist|cnt|\n+---------------+---+\n|  Frank Sinatra| 14|\n|    David Bowie|  9|\n|          Drake|  9|\n|  Elvis Presley|  8|\n|    The Beatles|  8|\n|     Elton John|  7|\n|     Kanye West|  7|\n| Billie Holiday|  6|\n|      Bob Dylan|  6|\n|           KISS|  6|\n|        Rihanna|  6|\n|   Teddy Wilson|  6|\n| The Beach Boys|  6|\n|  Benny Goodman|  5|\n|  Billie Eilish|  5|\n|  Calvin Harris|  5|\n|    Dean Martin|  5|\n|       Dua Lipa|  5|\n|         Eagles|  5|\n|Ella Fitzgerald|  5|\n+---------------+---+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1708274275739_1705872495",
      "id": "20211129-194145_2076774462",
      "dateCreated": "2024-02-18T19:37:55+0300",
      "status": "READY",
      "$$hashKey": "object:25487"
    },
    {
      "title": "(2) Для каждой аудиохарактеристики вывести топ 3 артистов по среднему значению каждой аудиохарактеристики его песен. Дополнительно: отнормировать на среднее значение аудиохарактеристики в год выхода песен.",
      "text": "%pyspark\n\nfrom pyspark.sql.functions import expr, col, avg, round\n\ntracks = spark.table(\"user_id.tracks_exp\").dropDuplicates()\n    \n##########################################################\n\nyear_means = tracks \\\n    .select(\"release_year\", \"danceability\", \"energy\", \"speechiness\", \"acousticness\", \"liveness\", \"valence\") \\\n    .groupBy(\"release_year\") \\\n    .agg( \\\n        round(avg(\"danceability\"), 2).alias(\"danceability_mean\"), \\\n        round(avg(\"energy\"), 2).alias(\"energy_mean\"), \\\n        round(avg(\"speechiness\"), 2).alias(\"speechiness_mean\"), \\\n        round(avg(\"acousticness\"), 2).alias(\"acousticness_mean\"), \\\n        round(avg(\"liveness\"), 2).alias(\"liveness_mean\"), \\\n        round(avg(\"valence\"), 2).alias(\"valence_mean\"))\n   \nyear_means.show()\n\n##########################################################\n\ntracks_advanced = tracks.join(year_means, \"release_year\") \\\n    .withColumn(\"norm_danceability_mean\", round(col(\"danceability\")/col(\"danceability_mean\"), 2)) \\\n    .withColumn(\"norm_energy_mean\", round(col(\"energy\")/col(\"energy_mean\"), 2)) \\\n    .withColumn(\"norm_speechiness_mean\", round(col(\"speechiness\")/col(\"speechiness_mean\"), 2)) \\\n    .withColumn(\"norm_acousticness_mean\", round(col(\"acousticness\")/col(\"acousticness_mean\"), 2)) \\\n    .withColumn(\"norm_liveness_mean\", round(col(\"liveness\")/col(\"liveness_mean\"), 2)) \\\n    .withColumn(\"norm_valence_mean\", round(col(\"valence\")/col(\"valence_mean\"), 2))\n\ntracks_advanced.show()\n\n##########################################################\n\nunpivot_expr = \"stack(6, 'norm_danceability_mean', norm_danceability_mean, 'norm_energ_meany', norm_energy_mean, 'norm_speechiness_mean', norm_speechiness_mean, \\\n    'norm_acousticness_mean', norm_acousticness_mean, 'norm_liveness_mean', norm_liveness_mean, 'norm_valence_mean', norm_valence_mean) as (characteristic, val)\"\n\ncharacteristics = [\"norm_danceability_mean\", \"norm_energ_meany\", \"norm_speechiness_mean\", \"norm_acousticness_mean\", \"norm_liveness_mean\", \"norm_valence_mean\"]\n\ntracks_advanced_unpivot = tracks_advanced \\\n    .select(\"name_artist\", expr(unpivot_expr))    \n    \nfor item in characteristics:\n    \n    top_by_characteristic = tracks_advanced_unpivot \\\n        .where(col(\"characteristic\") == item) \\\n        .groupBy(\"name_artist\").agg(avg(\"val\").alias(item)) \\\n        .orderBy(col(item).desc()) \n        \n    top_by_characteristic.show(3)\n",
      "user": "anonymous",
      "dateUpdated": "2024-02-18T19:37:55+0300",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+------------+-----------------+-----------+----------------+-----------------+-------------+------------+\n|release_year|danceability_mean|energy_mean|speechiness_mean|acousticness_mean|liveness_mean|valence_mean|\n+------------+-----------------+-----------+----------------+-----------------+-------------+------------+\n|        1959|             0.46|        0.3|            0.06|             0.81|         0.19|        0.46|\n|        1990|             0.55|       0.56|            0.06|             0.37|          0.2|        0.56|\n|        1975|             0.52|        0.5|            0.06|             0.49|         0.21|        0.57|\n|        1977|             0.54|       0.52|            0.09|             0.44|         0.22|        0.59|\n|        1924|             0.62|       0.34|            0.55|             0.81|         0.19|        0.51|\n|        2003|              0.6|       0.64|            0.09|             0.32|         0.21|        0.56|\n|        2007|              0.6|       0.67|            0.08|             0.29|         0.21|        0.58|\n|        2018|             0.63|       0.69|            0.11|             0.24|         0.22|        0.49|\n|        1974|             0.53|       0.49|            0.11|             0.51|         0.22|        0.59|\n|        2015|             0.58|       0.63|            0.09|             0.31|         0.21|         0.5|\n|        1927|             0.62|       0.27|            0.31|             0.92|         0.19|        0.63|\n|        1955|             0.43|       0.24|            0.08|              0.9|         0.22|        0.37|\n|        2006|              0.6|       0.68|            0.08|             0.28|         0.21|        0.59|\n|        1978|             0.54|       0.53|             0.1|             0.43|         0.22|        0.59|\n|        1925|             0.62|       0.27|             0.3|             0.92|         0.26|        0.64|\n|        1961|             0.48|       0.32|            0.06|             0.79|         0.19|        0.49|\n|        2013|              0.6|       0.69|            0.09|             0.24|         0.23|        0.51|\n|        1942|             0.44|       0.23|            0.08|             0.91|          0.2|        0.41|\n|        1939|             0.53|       0.33|            0.09|             0.92|         0.23|        0.59|\n|        1944|              0.5|       0.26|             0.2|             0.89|         0.24|         0.5|\n+------------+-----------------+-----------+----------------+-----------------+-------------+------------+\nonly showing top 20 rows\n\n+------------+--------------------+----------+------------+------+-----------+------------+--------+-------+--------------------+--------------------+-----------------+-----------+----------------+-----------------+-------------+------------+----------------------+----------------+---------------------+----------------------+------------------+-----------------+\n|release_year|                name|popularity|danceability|energy|speechiness|acousticness|liveness|valence|             artists|         name_artist|danceability_mean|energy_mean|speechiness_mean|acousticness_mean|liveness_mean|valence_mean|norm_danceability_mean|norm_energy_mean|norm_speechiness_mean|norm_acousticness_mean|norm_liveness_mean|norm_valence_mean|\n+------------+--------------------+----------+------------+------+-----------+------------+--------+-------+--------------------+--------------------+-----------------+-----------+----------------+-----------------+-------------+------------+----------------------+----------------+---------------------+----------------------+------------------+-----------------+\n|        1922|Capítulo 2.19 - B...|         0|       0.729| 0.211|      0.957|       0.769|   0.556|  0.728| ['Fernando Pessoa']|     Fernando Pessoa|             0.55|       0.37|             0.2|             0.91|         0.24|         0.6|                  1.33|            0.57|                 4.78|                  0.85|              2.32|             1.21|\n|        1923|       A Monday Date|         8|       0.745| 0.396|      0.481|       0.971|   0.238|  0.751|['Louis Armstrong...|Louis Armstrong &...|             0.63|       0.27|            0.53|             0.86|         0.22|        0.67|                  1.18|            1.47|                 0.91|                  1.13|              1.08|             1.12|\n|        1923|La Payasa - Remas...|         0|        0.47|  0.28|      0.129|       0.992|   0.107|  0.597| ['Ignacio Corsini']|     Ignacio Corsini|             0.63|       0.27|            0.53|             0.86|         0.22|        0.67|                  0.75|            1.04|                 0.24|                  1.15|              0.49|             0.89|\n|        1923|Chapter 5.20 - Kr...|         0|       0.645| 0.225|      0.949|       0.813|   0.152|  0.807|  ['Janusz Korczak']|      Janusz Korczak|             0.63|       0.27|            0.53|             0.86|         0.22|        0.67|                  1.02|            0.83|                 1.79|                  0.95|              0.69|              1.2|\n|        1923|Chapter 9.5 - Kró...|         0|       0.621| 0.217|      0.962|       0.787|   0.183|  0.716|  ['Janusz Korczak']|      Janusz Korczak|             0.63|       0.27|            0.53|             0.86|         0.22|        0.67|                  0.99|             0.8|                 1.82|                  0.92|              0.83|             1.07|\n|        1923|         Savoy Blues|         4|       0.811| 0.151|     0.0823|       0.986|  0.0965|  0.544|['Louis Armstrong...|Louis Armstrong &...|             0.63|       0.27|            0.53|             0.86|         0.22|        0.67|                  1.29|            0.56|                 0.16|                  1.15|              0.44|             0.81|\n|        1923| Couplets De La Haut|         0|       0.481| 0.221|      0.163|       0.995|    0.47|  0.743|['Maurice Chevali...|   Maurice Chevalier|             0.63|       0.27|            0.53|             0.86|         0.22|        0.67|                  0.76|            0.82|                 0.31|                  1.16|              2.14|             1.11|\n|        1923|Chapter 3.14 - Kr...|         0|       0.716| 0.262|      0.944|       0.808|   0.323|  0.813|  ['Janusz Korczak']|      Janusz Korczak|             0.63|       0.27|            0.53|             0.86|         0.22|        0.67|                  1.14|            0.97|                 1.78|                  0.94|              1.47|             1.21|\n|        1924|Chapter 68 - The ...|         0|       0.745| 0.315|      0.934|       0.764|   0.269|  0.593|['Radclyffe Hall'...|      Radclyffe Hall|             0.62|       0.34|            0.55|             0.81|         0.19|        0.51|                   1.2|            0.93|                  1.7|                  0.94|              1.42|             1.16|\n|        1924|El Matrero - Rema...|         0|       0.735| 0.325|     0.0549|       0.996|   0.509|   0.92|['Francisco Canaro']|    Francisco Canaro|             0.62|       0.34|            0.55|             0.81|         0.19|        0.51|                  1.19|            0.96|                  0.1|                  1.23|              2.68|              1.8|\n|        1924|       Harvard Blues|         0|       0.468| 0.315|     0.0344|       0.539|  0.0634|  0.642|['Jimmy Rushing A...|Jimmy Rushing And...|             0.62|       0.34|            0.55|             0.81|         0.19|        0.51|                  0.75|            0.93|                 0.06|                  0.67|              0.33|             1.26|\n|        1925| St. James Infirmary|        30|       0.705| 0.164|     0.0557|       0.897|   0.124|  0.591|['Louis Armstrong...|Louis Armstrong &...|             0.62|       0.27|             0.3|             0.92|         0.26|        0.64|                  1.14|            0.61|                 0.19|                  0.98|              0.48|             0.92|\n|        1925|       Don't Jive Me|         2|       0.615| 0.354|     0.0778|       0.931|   0.296|  0.935|['Louis Armstrong...|Louis Armstrong &...|             0.62|       0.27|             0.3|             0.92|         0.26|        0.64|                  0.99|            1.31|                 0.26|                  1.01|              1.14|             1.46|\n|        1925|          On me suit|         0|       0.576| 0.403|     0.0556|       0.969|   0.122|   0.61|['Mistinguett', '...|         Mistinguett|             0.62|       0.27|             0.3|             0.92|         0.26|        0.64|                  0.93|            1.49|                 0.19|                  1.05|              0.47|             0.95|\n|        1925|         You're Next|         0|       0.626| 0.227|     0.0581|       0.985|   0.119|  0.494|['Louis Armstrong...|Louis Armstrong &...|             0.62|       0.27|             0.3|             0.92|         0.26|        0.64|                  1.01|            0.84|                 0.19|                  1.07|              0.46|             0.77|\n|        1925|         Savoy Blues|         0|       0.799| 0.291|     0.0465|       0.952|   0.072|  0.727|['Louis Armstrong...|Louis Armstrong &...|             0.62|       0.27|             0.3|             0.92|         0.26|        0.64|                  1.29|            1.08|                 0.16|                  1.03|              0.28|             1.14|\n|        1925|Otello: Era la notte|         0|       0.355| 0.244|     0.0943|        0.99|   0.502|  0.104|['Giuseppe Verdi'...|      Giuseppe Verdi|             0.62|       0.27|             0.3|             0.92|         0.26|        0.64|                  0.57|             0.9|                 0.31|                  1.08|              1.93|             0.16|\n|        1925|       No (Papa, No)|         2|       0.828| 0.246|     0.0601|       0.868|  0.0948|  0.716|['Louis Armstrong...|Louis Armstrong &...|             0.62|       0.27|             0.3|             0.92|         0.26|        0.64|                  1.34|            0.91|                  0.2|                  0.94|              0.36|             1.12|\n|        1925|          Knee Drops|         2|       0.831| 0.361|       0.11|       0.917|  0.0419|  0.953|['Louis Armstrong...|Louis Armstrong &...|             0.62|       0.27|             0.3|             0.92|         0.26|        0.64|                  1.34|            1.34|                 0.37|                   1.0|              0.16|             1.49|\n|        1925|Глава 2. Часть 2....|         0|       0.704| 0.141|      0.939|       0.888|   0.256|  0.514|    ['Юрий Тынянов']|        Юрий Тынянов|             0.62|       0.27|             0.3|             0.92|         0.26|        0.64|                  1.14|            0.52|                 3.13|                  0.97|              0.98|              0.8|\n+------------+--------------------+----------+------------+------+-----------+------------+--------+-------+--------------------+--------------------+-----------------+-----------+----------------+-----------------+-------------+------------+----------------------+----------------+---------------------+----------------------+------------------+-----------------+\nonly showing top 20 rows\n\n+------------+----------------------+\n| name_artist|norm_danceability_mean|\n+------------+----------------------+\n|    DiegoJHG|                  2.36|\n|Gayla Peevey|                  2.19|\n|  Fred Davis|                  2.16|\n+------------+----------------------+\nonly showing top 3 rows\n\n+--------------+----------------+\n|   name_artist|norm_energ_meany|\n+--------------+----------------+\n|1943 - Madison|            4.53|\n|         May 6|            4.53|\n|          Macc|            4.13|\n+--------------+----------------+\nonly showing top 3 rows\n\n+--------------+---------------------+\n|   name_artist|norm_speechiness_mean|\n+--------------+---------------------+\n|Алексей Грибов|                19.08|\n|       Atatürk|                18.74|\n| Andre Francis|                 18.3|\n+--------------+---------------------+\nonly showing top 3 rows\n\n+--------------------+----------------------+\n|         name_artist|norm_acousticness_mean|\n+--------------------+----------------------+\n|Art Landry And Hi...|                  4.52|\n|    Relaxing Therapy|                  4.52|\n|              Akarui|                  4.52|\n+--------------------+----------------------+\nonly showing top 3 rows\n\n+--------------------+------------------+\n|         name_artist|norm_liveness_mean|\n+--------------------+------------------+\n|          Helen Ward|              5.41|\n|The Duke Ellingto...|              5.16|\n|       DJ Black Star|              5.14|\n+--------------------+------------------+\nonly showing top 3 rows\n\n+--------------------+-----------------+\n|         name_artist|norm_valence_mean|\n+--------------------+-----------------+\n|Jazz Majestic Orc...|             2.94|\n|    Humberto Morales|             2.91|\n|      Vyjayanthimala|             2.87|\n+--------------------+-----------------+\nonly showing top 3 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1708274275739_1398005445",
      "id": "20211122-175857_40251242",
      "dateCreated": "2024-02-18T19:37:55+0300",
      "status": "READY",
      "$$hashKey": "object:25488"
    },
    {
      "text": "%pyspark\n",
      "user": "anonymous",
      "dateUpdated": "2024-02-18T19:37:55+0300",
      "progress": 0,
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1708274275739_1598725861",
      "id": "paragraph_1708176419841_1703648335",
      "dateCreated": "2024-02-18T19:37:55+0300",
      "status": "READY",
      "$$hashKey": "object:25489"
    }
  ],
  "name": "homework_5",
  "id": "2JPBGD9H9",
  "defaultInterpreterGroup": "spark",
  "version": "0.10.1",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {},
  "path": "/user_id/homework_5"
}